generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  password       String?
  image          String?
  emailVerified  DateTime?  // üëà –¥–ª—è NextAuth
  accounts       Account[]  // üëà —Å–≤—è–∑–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ NextAuth
  sessions       Session[]  // üëà —Å–≤—è–∑–∏ –¥–ª—è —Å–µ—Å—Å–∏–π NextAuth
  carts          Cart[]
  favorites      Favorite[]
   comments Comment[]
}


model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())

  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  brand          String
  model          String
  memory         String
  img            String[]
  price          Int
  discount       Int?
  quantity       Int
  newModel       Boolean         @default(false)
  characteristic Characteristic?
  cartItems      CartItem[]
  comments Comment[]
  favoritedBy    Favorite[]
}

model Characteristic {
  id        Int     @id @default(autoincrement())
  screen    String
  cores     String
  power     String
  ram       String
  rom       String
  camera    String
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique
}

model Cart {
  id        Int        @id @default(autoincrement())
  token     String?    
  userId    Int?
  user      User?      @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
}

model Favorite {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
